versions pytest-5.4.3, py-1.8.0, python-3.6.9.final.0
cwd=/home/nother/daten/projekte/github-contributions/hickle
args=('--debug', 'hickle/tests/test_hickle.py')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f1c2963c630>
    pytest_plugin_registered [hook]
        plugin: <Session hickle exitstatus=None testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f1c2963c630>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f1c28a71390>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f1c28a71908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x7f1c2963c630>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f1c28a71c50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f1c28a49908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f1c2963c630>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.6/dist-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.6/dist-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.6/dist-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.6/dist-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.6/dist-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.6/dist-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.6/dist-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.6/dist-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.6/dist-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.6/dist-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.6/dist-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.6/dist-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.6/dist-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.6/dist-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.6/dist-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.6/dist-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.6/dist-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.6/dist-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.6/dist-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.6/dist-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.6/dist-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.6/dist-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.6/dist-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.6/dist-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.6/dist-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.6/dist-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.6/dist-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.6/dist-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.6/dist-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.6/dist-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x7f1c28a54b70>> err=<FDCapture 2 oldfd=6 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x7f1c28a49c50>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7f1c28a49c18>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f1c28a71390>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f1c28a71908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f1c28a71c50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f1c28a49908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f1c28a71a58>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f1c289a84a8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f1c2963c630>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/usr/local/lib/python3.6/dist-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/usr/local/lib/python3.6/dist-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/usr/local/lib/python3.6/dist-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/usr/local/lib/python3.6/dist-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/usr/local/lib/python3.6/dist-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/usr/local/lib/python3.6/dist-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/usr/local/lib/python3.6/dist-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/usr/local/lib/python3.6/dist-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/usr/local/lib/python3.6/dist-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/usr/local/lib/python3.6/dist-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/usr/local/lib/python3.6/dist-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/usr/local/lib/python3.6/dist-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/usr/local/lib/python3.6/dist-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/usr/local/lib/python3.6/dist-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/usr/local/lib/python3.6/dist-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/usr/local/lib/python3.6/dist-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/usr/local/lib/python3.6/dist-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/usr/local/lib/python3.6/dist-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.resultlog' from '/usr/local/lib/python3.6/dist-packages/_pytest/resultlog.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/usr/local/lib/python3.6/dist-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/usr/local/lib/python3.6/dist-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/usr/local/lib/python3.6/dist-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/usr/local/lib/python3.6/dist-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/usr/local/lib/python3.6/dist-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/usr/local/lib/python3.6/dist-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/usr/local/lib/python3.6/dist-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/usr/local/lib/python3.6/dist-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/usr/local/lib/python3.6/dist-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/usr/local/lib/python3.6/dist-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/usr/local/lib/python3.6/dist-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x7f1c28a54b70>> err=<FDCapture 2 oldfd=6 _state='suspended' tmpfile=<_pytest.capture.EncodedFile object at 0x7f1c28a49c50>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x7f1c28a49c18>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f1c28a71390>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f1c28a71908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f1c28a71c50>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f1c28a49908>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f1c28a71a58>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f1c289a84a8>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f1c289a89b0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f1c2bb16c18>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f1c2963c630>
          startdir: /home/nother/daten/projekte/github-contributions/hickle
      finish pytest_report_header --> [['rootdir: /home/nother/daten/projekte/github-contributions/hickle, inifile: setup.cfg', 'plugins: cov-2.8.1'], 'cachedir: .pytest_cache', ['using: pytest-5.4.3 pylib-1.8.0', 'setuptools registered plugins:', '  pytest-cov-2.8.1 at /usr/local/lib/python3.6/dist-packages/pytest_cov/plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['hickle/tests/test_hickle.py'] [collection]
        pytest_collectstart [hook]
            collector: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py'), []) [collection]
            pytest_ignore_collect [hook]
                path: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/__init__.py
                config: <_pytest.config.Config object at 0x7f1c2963c630>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/__init__.py
                parent: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/__init__.py
                  parent: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/nother/daten/projekte/github-contributions/hickle/hickle/tests> [hook]
            finish pytest_collect_file --> [<Package /home/nother/daten/projekte/github-contributions/hickle/hickle/tests>] [hook]
            pytest_ignore_collect [hook]
                path: /home/nother/daten/projekte/github-contributions/hickle/hickle/__init__.py
                config: <_pytest.config.Config object at 0x7f1c2963c630>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/nother/daten/projekte/github-contributions/hickle/hickle/__init__.py
                parent: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/nother/daten/projekte/github-contributions/hickle/hickle/__init__.py
                  parent: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package /home/nother/daten/projekte/github-contributions/hickle/hickle> [hook]
            finish pytest_collect_file --> [<Package /home/nother/daten/projekte/github-contributions/hickle/hickle>] [hook]
            pytest_collect_file [hook]
                path: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py
                parent: <Package /home/nother/daten/projekte/github-contributions/hickle/hickle/tests>
              pytest_pycollect_makemodule [hook]
                  path: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py
                  parent: <Package /home/nother/daten/projekte/github-contributions/hickle/hickle/tests>
              finish pytest_pycollect_makemodule --> <Module test_hickle.py> [hook]
            finish pytest_collect_file --> [<Module test_hickle.py>] [hook]
          matchnodes [<Module test_hickle.py>] [] [collection]
            matchnodes finished ->  1 nodes [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module test_hickle.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_hickle.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_hickle.py>
      early skip of rewriting module: hickle [assertion]
      early skip of rewriting module: hickle.__version__ [assertion]
      early skip of rewriting module: hickle.hickle [assertion]
      early skip of rewriting module: dill [assertion]
      early skip of rewriting module: dill.info [assertion]
      early skip of rewriting module: dill._dill [assertion]
      early skip of rewriting module: gc [assertion]
      early skip of rewriting module: _pyio [assertion]
      early skip of rewriting module: cStringIO [assertion]
      early skip of rewriting module: dill.settings [assertion]
      early skip of rewriting module: dill.source [assertion]
      early skip of rewriting module: dill.temp [assertion]
      early skip of rewriting module: dill.detect [assertion]
      early skip of rewriting module: dill.pointers [assertion]
      early skip of rewriting module: dill.objtypes [assertion]
      early skip of rewriting module: h5py [assertion]
      early skip of rewriting module: h5py._errors [assertion]
      early skip of rewriting module: h5py._hl [assertion]
      early skip of rewriting module: h5py._hl.compat [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: h5py.version [assertion]
      early skip of rewriting module: h5py.h5 [assertion]
      early skip of rewriting module: h5py.defs [assertion]
      early skip of rewriting module: h5py._objects [assertion]
      early skip of rewriting module: h5py.gc [assertion]
      early skip of rewriting module: h5py.weakref [assertion]
      early skip of rewriting module: h5py.warnings [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy.core [assertion]
      early skip of rewriting module: numpy.core.info [assertion]
      early skip of rewriting module: numpy.core.multiarray [assertion]
      early skip of rewriting module: numpy.core.overrides [assertion]
      early skip of rewriting module: numpy.core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.compat [assertion]
      early skip of rewriting module: numpy.compat._inspect [assertion]
      early skip of rewriting module: numpy.compat.py3k [assertion]
      early skip of rewriting module: pickle5 [assertion]
      early skip of rewriting module: numpy.core.umath [assertion]
      early skip of rewriting module: numpy.core.numerictypes [assertion]
      early skip of rewriting module: numpy.core._string_helpers [assertion]
      early skip of rewriting module: numpy.core._type_aliases [assertion]
      early skip of rewriting module: numpy.core._dtype [assertion]
      early skip of rewriting module: numpy.core.numeric [assertion]
      early skip of rewriting module: numpy.core._exceptions [assertion]
      early skip of rewriting module: numpy.core._asarray [assertion]
      early skip of rewriting module: numpy.core._ufunc_config [assertion]
      early skip of rewriting module: numpy.core.fromnumeric [assertion]
      early skip of rewriting module: numpy.core._methods [assertion]
      early skip of rewriting module: numpy.core.arrayprint [assertion]
      early skip of rewriting module: numpy.core.defchararray [assertion]
      early skip of rewriting module: numpy.core.records [assertion]
      early skip of rewriting module: numpy.core.memmap [assertion]
      early skip of rewriting module: numpy.core.function_base [assertion]
      early skip of rewriting module: numpy.core.machar [assertion]
      early skip of rewriting module: numpy.core.getlimits [assertion]
      early skip of rewriting module: numpy.core.shape_base [assertion]
      early skip of rewriting module: numpy.core.einsumfunc [assertion]
      early skip of rewriting module: numpy.core._add_newdocs [assertion]
      early skip of rewriting module: numpy.core._multiarray_tests [assertion]
      early skip of rewriting module: numpy.core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy.core._internal [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib.info [assertion]
      early skip of rewriting module: numpy.lib.type_check [assertion]
      early skip of rewriting module: numpy.lib.ufunclike [assertion]
      early skip of rewriting module: numpy.lib.index_tricks [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg.info [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib.twodim_base [assertion]
      early skip of rewriting module: numpy.linalg.lapack_lite [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.lib.function_base [assertion]
      early skip of rewriting module: numpy.lib.histograms [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.nanfunctions [assertion]
      early skip of rewriting module: numpy.lib.shape_base [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib.polynomial [assertion]
      early skip of rewriting module: numpy.lib.utils [assertion]
      early skip of rewriting module: numpy.lib.arraysetops [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib.financial [assertion]
      early skip of rewriting module: numpy.lib.arrayterator [assertion]
      early skip of rewriting module: numpy.lib.arraypad [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.fft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft_internal [assertion]
      early skip of rewriting module: numpy.fft.helper [assertion]
      early skip of rewriting module: numpy.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polyutils [assertion]
      early skip of rewriting module: numpy.polynomial._polybase [assertion]
      early skip of rewriting module: numpy.polynomial.chebyshev [assertion]
      early skip of rewriting module: numpy.polynomial.legendre [assertion]
      early skip of rewriting module: numpy.polynomial.hermite [assertion]
      early skip of rewriting module: numpy.polynomial.hermite_e [assertion]
      early skip of rewriting module: numpy.polynomial.laguerre [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: numpy.random.common [assertion]
      early skip of rewriting module: numpy.random.bounded_integers [assertion]
      early skip of rewriting module: numpy.random.mt19937 [assertion]
      early skip of rewriting module: numpy.random.bit_generator [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: numpy.random.philox [assertion]
      early skip of rewriting module: numpy.random.pcg64 [assertion]
      early skip of rewriting module: numpy.random.sfc64 [assertion]
      early skip of rewriting module: numpy.random.generator [assertion]
      early skip of rewriting module: numpy.ctypeslib [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: numpy.testing [assertion]
      early skip of rewriting module: unittest [assertion]
      early skip of rewriting module: unittest.result [assertion]
      early skip of rewriting module: unittest.util [assertion]
      early skip of rewriting module: unittest.case [assertion]
      early skip of rewriting module: difflib [assertion]
      early skip of rewriting module: unittest.suite [assertion]
      early skip of rewriting module: unittest.loader [assertion]
      early skip of rewriting module: unittest.main [assertion]
      early skip of rewriting module: unittest.runner [assertion]
      early skip of rewriting module: unittest.signals [assertion]
      early skip of rewriting module: numpy.testing._private [assertion]
      early skip of rewriting module: numpy.testing._private.utils [assertion]
      early skip of rewriting module: numpy.testing._private.decorators [assertion]
      early skip of rewriting module: numpy.testing._private.nosetester [assertion]
      early skip of rewriting module: h5py._conv [assertion]
      early skip of rewriting module: h5py.h5r [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5t [assertion]
      early skip of rewriting module: h5py.utils [assertion]
      early skip of rewriting module: h5py.codecs [assertion]
      early skip of rewriting module: h5py.collections [assertion]
      early skip of rewriting module: h5py.sys [assertion]
      early skip of rewriting module: h5py.operator [assertion]
      early skip of rewriting module: h5py.warnings [assertion]
      early skip of rewriting module: h5py.numpy [assertion]
      early skip of rewriting module: h5py.h5py_warnings [assertion]
      early skip of rewriting module: h5py.platform [assertion]
      early skip of rewriting module: h5py.collections [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5z [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5a [assertion]
      early skip of rewriting module: h5py.h5s [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5p [assertion]
      early skip of rewriting module: h5py.h5ac [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py._proxy [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5d [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5ds [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5f [assertion]
      early skip of rewriting module: h5py.h5g [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5i [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5py [assertion]
      early skip of rewriting module: h5py.h5fd [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5pl [assertion]
      early skip of rewriting module: h5py._hl.filters [assertion]
      early skip of rewriting module: h5py._hl.base [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py._hl.files [assertion]
      early skip of rewriting module: h5py._hl.group [assertion]
      early skip of rewriting module: h5py.h5o [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.h5l [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py._hl.dataset [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: h5py._hl.selections [assertion]
      early skip of rewriting module: h5py._hl.selections2 [assertion]
      early skip of rewriting module: h5py._hl.datatype [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py._hl.vds [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py._hl.attrs [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: h5py.functools [assertion]
      early skip of rewriting module: hickle.helpers [assertion]
      early skip of rewriting module: hickle.lookup [assertion]
      early skip of rewriting module: hickle.tests [assertion]
      find_module called for: hickle.tests.test_hickle [assertion]
      matched test file (was specified on cmdline): '/home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py' [assertion]
      found cached rewritten pyc for /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py [assertion]
      early skip of rewriting module: hickle.loaders [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __name__
            obj: hickle.tests.test_hickle
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __doc__
            obj: 
# test_hickle.py

Unit tests for hickle module.


        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __package__
            obj: hickle.tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __loader__
            obj: <_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f1c293002b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __spec__
            obj: ModuleSpec(name='hickle.tests.test_hickle', loader=<_pytest.assertion.rewrite.AssertionRewritingHook object at 0x7f1c293002b0>, origin='/home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py')
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __file__
            obj: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/test_hickle.py
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __cached__
            obj: /home/nother/daten/projekte/github-contributions/hickle/hickle/tests/__pycache__/test_hickle.cpython-36.pyc
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __builtins__
            obj: {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'BufferError': <class 'BufferError'>, 'MemoryError': <class 'MemoryError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2019 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/usr/local/lib/python3.6/dist-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: odict
            obj: <class 'collections.OrderedDict'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: os
            obj: <module 'os' from '/usr/lib/python3.6/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: re
            obj: <module 're' from '/usr/lib/python3.6/re.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: pprint
            obj: <function pprint at 0x7f1c2b98b7b8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: pickle
            obj: <module 'dill' from '/usr/local/lib/python3.6/dist-packages/dill/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: h5py
            obj: <module 'h5py' from '/usr/local/lib/python3.6/dist-packages/h5py/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: np
            obj: <module 'numpy' from '/home/nother/.local/lib/python3.6/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: pytest
            obj: <module 'pytest' from '/usr/local/lib/python3.6/dist-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: dump
            obj: <function dump at 0x7f1c23163b70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: helpers
            obj: <module 'hickle.helpers' from '/home/nother/daten/projekte/github-contributions/hickle/hickle/helpers.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: hickle
            obj: <module 'hickle.hickle' from '/home/nother/daten/projekte/github-contributions/hickle/hickle/hickle.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: load
            obj: <function load at 0x7f1c231621e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: loaders
            obj: <module 'hickle.loaders' from '/home/nother/daten/projekte/github-contributions/hickle/hickle/loaders/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: SerializedWarning
            obj: <class 'hickle.lookup.SerializedWarning'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: NESTED_DICT
            obj: {'level1_1': {'level2_1': [1, 2, 3], 'level2_2': [4, 5, 6]}, 'level1_2': {'level2_1': [1, 2, 3], 'level2_2': [4, 5, 6]}, 'level1_3': {'level2_1': {'level3_1': [1, 2, 3], 'level3_2': [4, 5, 6]}, 'level2_2': [4, 5, 6]}}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: func
            obj: <function func at 0x7f1c23162e18>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: with_state
            obj: <class 'hickle.tests.test_hickle.with_state'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_invalid_file
            obj: <function test_invalid_file at 0x7f1c0fe330d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_invalid_file>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: pickle_dumps
            obj: <function dumps at 0x7f1c2a0a36a8>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: pickle_loads
            obj: <function loads at 0x7f1c28921158>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: make_visible_to_dumps
            obj: <function make_visible_to_dumps at 0x7f1c0fe33400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_state_obj
            obj: <function test_state_obj at 0x7f1c0fe33488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_state_obj>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_local_func
            obj: <function test_local_func at 0x7f1c0fe33510>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_local_func>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_binary_file
            obj: <function test_binary_file at 0x7f1c0fe33598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_binary_file>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_non_empty_group
            obj: <function test_non_empty_group at 0x7f1c0fe33620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_non_empty_group>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_string
            obj: <function test_string at 0x7f1c0fe336a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_string>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_65bit_int
            obj: <function test_65bit_int at 0x7f1c0fe33730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_65bit_int>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_list
            obj: <function test_list at 0x7f1c0fe337b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_list>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_set
            obj: <function test_set at 0x7f1c0fe33840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_set>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_numpy
            obj: <function test_numpy at 0x7f1c0fe338c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_masked
            obj: <function test_masked at 0x7f1c0fe33950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_masked>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_object_numpy
            obj: <function test_object_numpy at 0x7f1c0fe339d8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_object_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_string_numpy
            obj: <function test_string_numpy at 0x7f1c0fe33a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_string_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_list_object_numpy
            obj: <function test_list_object_numpy at 0x7f1c0fe33ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_list_object_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_dict
            obj: <function test_dict at 0x7f1c0fe33b70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_odict
            obj: <function test_odict at 0x7f1c0fe33bf8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_odict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_empty_dict
            obj: <function test_empty_dict at 0x7f1c0fe33c80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56d8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_dict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_compression
            obj: <function test_compression at 0x7f1c0fe33d08>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b53c8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_compression>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_dict_int_key
            obj: <function test_dict_int_key at 0x7f1c0fe33d90>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c289b56a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dict_int_key>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_dict_nested
            obj: <function test_dict_nested at 0x7f1c0fe33e18>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dict_nested>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_masked_dict
            obj: <function test_masked_dict at 0x7f1c0fe33ea0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_masked_dict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_np_float
            obj: <function test_np_float at 0x7f1c0fe33f28>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_np_float>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_comp_kwargs
            obj: <function test_comp_kwargs at 0x7f1c0fe34048>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_comp_kwargs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_list_numpy
            obj: <function test_list_numpy at 0x7f1c0fe340d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_list_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_tuple_numpy
            obj: <function test_tuple_numpy at 0x7f1c0fe34158>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_tuple_numpy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_numpy_dtype
            obj: <function test_numpy_dtype at 0x7f1c0fe341e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_numpy_dtype>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_none
            obj: <function test_none at 0x7f1c0fe34268>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_none>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_file_open_close
            obj: <function test_file_open_close at 0x7f1c0fe342f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_file_open_close>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_hdf5_group
            obj: <function test_hdf5_group at 0x7f1c0fe34378>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_hdf5_group>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_list_order
            obj: <function test_list_order at 0x7f1c0fe34400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_list_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_embedded_array
            obj: <function test_embedded_array at 0x7f1c0fe34488>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_embedded_array>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: generate_nested
            obj: <function generate_nested at 0x7f1c0fe34510>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_dump_nested
            obj: <function test_dump_nested at 0x7f1c0fe34598>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dump_nested>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_with_open_file
            obj: <function test_with_open_file at 0x7f1c0fe34620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_with_open_file>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_load
            obj: <function test_load at 0x7f1c0fe346a8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_ndarray
            obj: <function test_ndarray at 0x7f1c0fe34730>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ndarray>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_ndarray_masked
            obj: <function test_ndarray_masked at 0x7f1c0fe347b8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4dc88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_ndarray_masked>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_simple_dict
            obj: <function test_simple_dict at 0x7f1c0fe34840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4deb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_simple_dict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_complex_dict
            obj: <function test_complex_dict at 0x7f1c0fe348c8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fe4df98>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_complex_dict>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_multi_hickle
            obj: <function test_multi_hickle at 0x7f1c0fe34950>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddee48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_multi_hickle>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_complex
            obj: <function test_complex at 0x7f1c0fe349d8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddeeb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_complex>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_nonstring_keys
            obj: <function test_nonstring_keys at 0x7f1c0fe34a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddec88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_nonstring_keys>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_scalar_compression
            obj: <function test_scalar_compression at 0x7f1c0fe34ae8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddee48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_scalar_compression>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_bytes
            obj: <function test_bytes at 0x7f1c0fe34b70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddeeb8>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_bytes>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_np_scalar
            obj: <function test_np_scalar at 0x7f1c0fe34bf8>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddec88>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_np_scalar>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: test_slash_dict_keys
            obj: <function test_slash_dict_keys at 0x7f1c0fe34c80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f1c0fddee48>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_slash_dict_keys>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __repr__
            obj: <slot wrapper '__repr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __getattribute__
            obj: <slot wrapper '__getattribute__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __setattr__
            obj: <slot wrapper '__setattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __delattr__
            obj: <slot wrapper '__delattr__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __init__
            obj: <slot wrapper '__init__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __new__
            obj: <built-in method __new__ of type object at 0x9c4920>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __dir__
            obj: <method '__dir__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __dict__
            obj: <member '__dict__' of 'module' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __hash__
            obj: <slot wrapper '__hash__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __str__
            obj: <slot wrapper '__str__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __lt__
            obj: <slot wrapper '__lt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __le__
            obj: <slot wrapper '__le__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __eq__
            obj: <slot wrapper '__eq__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __ne__
            obj: <slot wrapper '__ne__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __gt__
            obj: <slot wrapper '__gt__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __ge__
            obj: <slot wrapper '__ge__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __reduce_ex__
            obj: <method '__reduce_ex__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __reduce__
            obj: <method '__reduce__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __subclasshook__
            obj: <method '__subclasshook__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __init_subclass__
            obj: <method '__init_subclass__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __format__
            obj: <method '__format__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __sizeof__
            obj: <method '__sizeof__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hickle.py>
            name: __class__
            obj: <attribute '__class__' of 'object' objects>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'hickle/tests/test_hickle.py' lenresult=45 outcome='passed'> [hook]
    genitems <Function test_invalid_file> [collection]
      pytest_itemcollected [hook]
          item: <Function test_invalid_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_state_obj> [collection]
      pytest_itemcollected [hook]
          item: <Function test_state_obj>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_local_func> [collection]
      pytest_itemcollected [hook]
          item: <Function test_local_func>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_binary_file> [collection]
      pytest_itemcollected [hook]
          item: <Function test_binary_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_non_empty_group> [collection]
      pytest_itemcollected [hook]
          item: <Function test_non_empty_group>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_string> [collection]
      pytest_itemcollected [hook]
          item: <Function test_string>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_65bit_int> [collection]
      pytest_itemcollected [hook]
          item: <Function test_65bit_int>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_list> [collection]
      pytest_itemcollected [hook]
          item: <Function test_list>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_set> [collection]
      pytest_itemcollected [hook]
          item: <Function test_set>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_masked> [collection]
      pytest_itemcollected [hook]
          item: <Function test_masked>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_object_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_object_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_string_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_string_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_list_object_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_list_object_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_odict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_odict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_empty_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_compression> [collection]
      pytest_itemcollected [hook]
          item: <Function test_compression>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dict_int_key> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dict_int_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dict_nested> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dict_nested>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_masked_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_masked_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_np_float> [collection]
      pytest_itemcollected [hook]
          item: <Function test_np_float>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_comp_kwargs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_comp_kwargs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_list_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_list_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tuple_numpy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tuple_numpy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_numpy_dtype> [collection]
      pytest_itemcollected [hook]
          item: <Function test_numpy_dtype>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_none> [collection]
      pytest_itemcollected [hook]
          item: <Function test_none>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_file_open_close> [collection]
      pytest_itemcollected [hook]
          item: <Function test_file_open_close>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_hdf5_group> [collection]
      pytest_itemcollected [hook]
          item: <Function test_hdf5_group>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_list_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_list_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_embedded_array> [collection]
      pytest_itemcollected [hook]
          item: <Function test_embedded_array>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dump_nested> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dump_nested>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_with_open_file> [collection]
      pytest_itemcollected [hook]
          item: <Function test_with_open_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ndarray> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ndarray>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_ndarray_masked> [collection]
      pytest_itemcollected [hook]
          item: <Function test_ndarray_masked>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_simple_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_simple_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_complex_dict> [collection]
      pytest_itemcollected [hook]
          item: <Function test_complex_dict>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_multi_hickle> [collection]
      pytest_itemcollected [hook]
          item: <Function test_multi_hickle>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_complex> [collection]
      pytest_itemcollected [hook]
          item: <Function test_complex>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_nonstring_keys> [collection]
      pytest_itemcollected [hook]
          item: <Function test_nonstring_keys>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_scalar_compression> [collection]
      pytest_itemcollected [hook]
          item: <Function test_scalar_compression>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_bytes> [collection]
      pytest_itemcollected [hook]
          item: <Function test_bytes>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_np_scalar> [collection]
      pytest_itemcollected [hook]
          item: <Function test_np_scalar>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_slash_dict_keys> [collection]
      pytest_itemcollected [hook]
          item: <Function test_slash_dict_keys>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'hickle/tests/test_hickle.py' lenresult=45 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f1c2963c630>
          items: [<Function test_invalid_file>, <Function test_state_obj>, <Function test_local_func>, <Function test_binary_file>, <Function test_non_empty_group>, <Function test_string>, <Function test_65bit_int>, <Function test_list>, <Function test_set>, <Function test_numpy>, <Function test_masked>, <Function test_object_numpy>, <Function test_string_numpy>, <Function test_list_object_numpy>, <Function test_dict>, <Function test_odict>, <Function test_empty_dict>, <Function test_compression>, <Function test_dict_int_key>, <Function test_dict_nested>, <Function test_masked_dict>, <Function test_np_float>, <Function test_comp_kwargs>, <Function test_list_numpy>, <Function test_tuple_numpy>, <Function test_numpy_dtype>, <Function test_none>, <Function test_file_open_close>, <Function test_hdf5_group>, <Function test_list_order>, <Function test_embedded_array>, <Function test_dump_nested>, <Function test_with_open_file>, <Function test_load>, <Function test_ndarray>, <Function test_ndarray_masked>, <Function test_simple_dict>, <Function test_complex_dict>, <Function test_multi_hickle>, <Function test_complex>, <Function test_nonstring_keys>, <Function test_scalar_compression>, <Function test_bytes>, <Function test_np_scalar>, <Function test_slash_dict_keys>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f1c2963c630>
            startdir: /home/nother/daten/projekte/github-contributions/hickle
            items: [<Function test_invalid_file>, <Function test_state_obj>, <Function test_local_func>, <Function test_binary_file>, <Function test_non_empty_group>, <Function test_string>, <Function test_65bit_int>, <Function test_list>, <Function test_set>, <Function test_numpy>, <Function test_masked>, <Function test_object_numpy>, <Function test_string_numpy>, <Function test_list_object_numpy>, <Function test_dict>, <Function test_odict>, <Function test_empty_dict>, <Function test_compression>, <Function test_dict_int_key>, <Function test_dict_nested>, <Function test_masked_dict>, <Function test_np_float>, <Function test_comp_kwargs>, <Function test_list_numpy>, <Function test_tuple_numpy>, <Function test_numpy_dtype>, <Function test_none>, <Function test_file_open_close>, <Function test_hdf5_group>, <Function test_list_order>, <Function test_embedded_array>, <Function test_dump_nested>, <Function test_with_open_file>, <Function test_load>, <Function test_ndarray>, <Function test_ndarray_masked>, <Function test_simple_dict>, <Function test_complex_dict>, <Function test_multi_hickle>, <Function test_complex>, <Function test_nonstring_keys>, <Function test_scalar_compression>, <Function test_bytes>, <Function test_np_scalar>, <Function test_slash_dict_keys>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> [<Function test_invalid_file>, <Function test_state_obj>, <Function test_local_func>, <Function test_binary_file>, <Function test_non_empty_group>, <Function test_string>, <Function test_65bit_int>, <Function test_list>, <Function test_set>, <Function test_numpy>, <Function test_masked>, <Function test_object_numpy>, <Function test_string_numpy>, <Function test_list_object_numpy>, <Function test_dict>, <Function test_odict>, <Function test_empty_dict>, <Function test_compression>, <Function test_dict_int_key>, <Function test_dict_nested>, <Function test_masked_dict>, <Function test_np_float>, <Function test_comp_kwargs>, <Function test_list_numpy>, <Function test_tuple_numpy>, <Function test_numpy_dtype>, <Function test_none>, <Function test_file_open_close>, <Function test_hdf5_group>, <Function test_list_order>, <Function test_embedded_array>, <Function test_dump_nested>, <Function test_with_open_file>, <Function test_load>, <Function test_ndarray>, <Function test_ndarray_masked>, <Function test_simple_dict>, <Function test_complex_dict>, <Function test_multi_hickle>, <Function test_complex>, <Function test_nonstring_keys>, <Function test_scalar_compression>, <Function test_bytes>, <Function test_np_scalar>, <Function test_slash_dict_keys>] [hook]
    pytest_runtestloop [hook]
        session: <Session hickle exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=45>
      pytest_runtest_protocol [hook]
          item: <Function test_invalid_file>
          nextitem: <Function test_state_obj>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_invalid_file
            location: ('hickle/tests/test_hickle.py', 88, 'test_invalid_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_invalid_file>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_file>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_invalid_file>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_invalid_file>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_file>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_invalid_file>
            nextitem: <Function test_state_obj>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_invalid_file>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_invalid_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_invalid_file
            location: ('hickle/tests/test_hickle.py', 88, 'test_invalid_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_state_obj>
          nextitem: <Function test_local_func>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_state_obj
            location: ('hickle/tests/test_hickle.py', 102, 'test_state_obj')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_state_obj>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_state_obj>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x7f1c0fdf6208> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_obj>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_state_obj>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_state_obj>
          early skip of rewriting module: hickle.loaders.load_tests [assertion]
          early skip of rewriting module: hickle.loaders.load_builtins [assertion]
          early skip of rewriting module: hickle.loaders.load_tests [assertion]
          early skip of rewriting module: encodings.ascii [assertion]
        pytest_runtest_makereport [hook]
            item: <Function test_state_obj>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=31>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_state_obj>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=5>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_state_obj>
            nextitem: <Function test_local_func>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_state_obj>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_obj>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_state_obj
            location: ('hickle/tests/test_hickle.py', 102, 'test_state_obj')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_local_func>
          nextitem: <Function test_binary_file>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_local_func
            location: ('hickle/tests/test_hickle.py', 119, 'test_local_func')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_local_func>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_local_func>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_local_func>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_local_func>
        pytest_runtest_makereport [hook]
            item: <Function test_local_func>
            call: <CallInfo when='call' excinfo=<ExceptionInfo DID NOT WARN. No warnings of type (<class 'hickle.lookup.SerializedWarning'>,) was emitted. The list of emitted warnings is: []. tblen=28>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_local_func>
            call: <CallInfo when='call' excinfo=<ExceptionInfo DID NOT WARN. No warnings of type (<class 'hickle.lookup.SerializedWarning'>,) was emitted. The list of emitted warnings is: []. tblen=1>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_local_func>
            nextitem: <Function test_binary_file>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_local_func>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_local_func
            location: ('hickle/tests/test_hickle.py', 119, 'test_local_func')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_binary_file>
          nextitem: <Function test_non_empty_group>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_binary_file
            location: ('hickle/tests/test_hickle.py', 131, 'test_binary_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_binary_file>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_binary_file>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_binary_file>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_binary_file>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_binary_file>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_binary_file>
            nextitem: <Function test_non_empty_group>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_binary_file>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_binary_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_binary_file
            location: ('hickle/tests/test_hickle.py', 131, 'test_binary_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_non_empty_group>
          nextitem: <Function test_string>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_non_empty_group
            location: ('hickle/tests/test_hickle.py', 143, 'test_non_empty_group')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_non_empty_group>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_empty_group>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_non_empty_group>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_non_empty_group>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_empty_group>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_non_empty_group>
            nextitem: <Function test_string>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_non_empty_group>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_non_empty_group' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_non_empty_group
            location: ('hickle/tests/test_hickle.py', 143, 'test_non_empty_group')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_string>
          nextitem: <Function test_65bit_int>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_string
            location: ('hickle/tests/test_hickle.py', 151, 'test_string')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_string>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_string>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_string>
        pytest_runtest_makereport [hook]
            item: <Function test_string>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'Group' object has no attribute 'crate_dataset'",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_string>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'Group' object has no attribute 'crate_dataset'",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_string>
            nextitem: <Function test_65bit_int>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_string
            location: ('hickle/tests/test_hickle.py', 151, 'test_string')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_65bit_int>
          nextitem: <Function test_list>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_65bit_int
            location: ('hickle/tests/test_hickle.py', 161, 'test_65bit_int')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_65bit_int>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_65bit_int>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_65bit_int>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_65bit_int>
        pytest_runtest_makereport [hook]
            item: <Function test_65bit_int>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError("Provided argument 'file_obj' does not appear to be a valid hickle file! (Illegal slicing argument for scalar dataspace)",) tblen=28>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_65bit_int>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError("Provided argument 'file_obj' does not appear to be a valid hickle file! (Illegal slicing argument for scalar dataspace)",) tblen=2>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_65bit_int>
            nextitem: <Function test_list>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_65bit_int>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_65bit_int
            location: ('hickle/tests/test_hickle.py', 161, 'test_65bit_int')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_list>
          nextitem: <Function test_set>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_list
            location: ('hickle/tests/test_hickle.py', 171, 'test_list')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_list>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_list>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_list>
        pytest_runtest_makereport [hook]
            item: <Function test_list>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError("Provided argument 'file_obj' does not appear to be a valid hickle file! (Illegal slicing argument for scalar dataspace)",) tblen=28>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_list>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError("Provided argument 'file_obj' does not appear to be a valid hickle file! (Illegal slicing argument for scalar dataspace)",) tblen=2>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_list>
            nextitem: <Function test_set>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_list
            location: ('hickle/tests/test_hickle.py', 171, 'test_list')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_set>
          nextitem: <Function test_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_set
            location: ('hickle/tests/test_hickle.py', 191, 'test_set')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_set>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_set' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_set>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_set>
        pytest_runtest_makereport [hook]
            item: <Function test_set>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'set' object does not support indexing",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_set' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_set>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'set' object does not support indexing",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_set>
            nextitem: <Function test_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_set' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_set
            location: ('hickle/tests/test_hickle.py', 191, 'test_set')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_numpy>
          nextitem: <Function test_masked>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_numpy
            location: ('hickle/tests/test_hickle.py', 206, 'test_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_numpy>
          early skip of rewriting module: hickle.loaders.load_numpy [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_numpy>
            nextitem: <Function test_masked>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_numpy
            location: ('hickle/tests/test_hickle.py', 206, 'test_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_masked>
          nextitem: <Function test_object_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_masked
            location: ('hickle/tests/test_hickle.py', 224, 'test_masked')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_masked>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_masked>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_masked>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_masked>
        pytest_runtest_makereport [hook]
            item: <Function test_masked>
            call: <CallInfo when='call' excinfo=<ExceptionInfo RecursionError('maximum recursion depth exceeded in comparison',) tblen=493>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_masked>
            call: <CallInfo when='call' excinfo=<ExceptionInfo RecursionError('maximum recursion depth exceeded in comparison',) tblen=467>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_masked>
            nextitem: <Function test_object_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_masked>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_masked
            location: ('hickle/tests/test_hickle.py', 224, 'test_masked')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_object_numpy>
          nextitem: <Function test_string_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_object_numpy
            location: ('hickle/tests/test_hickle.py', 241, 'test_object_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_object_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_object_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_object_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_object_numpy>
        pytest_runtest_makereport [hook]
            item: <Function test_object_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=32>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_object_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=6>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_object_numpy>
            nextitem: <Function test_string_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_object_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_object_numpy
            location: ('hickle/tests/test_hickle.py', 241, 'test_object_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_string_numpy>
          nextitem: <Function test_list_object_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_string_numpy
            location: ('hickle/tests/test_hickle.py', 257, 'test_string_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_string_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_string_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_string_numpy>
        pytest_runtest_makereport [hook]
            item: <Function test_string_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("No conversion path for dtype: dtype('<U6')",) tblen=35>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_string_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("No conversion path for dtype: dtype('<U6')",) tblen=9>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_string_numpy>
            nextitem: <Function test_list_object_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_string_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_string_numpy
            location: ('hickle/tests/test_hickle.py', 257, 'test_string_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_list_object_numpy>
          nextitem: <Function test_dict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_object_numpy
            location: ('hickle/tests/test_hickle.py', 266, 'test_list_object_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_list_object_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_object_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_list_object_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_list_object_numpy>
        pytest_runtest_makereport [hook]
            item: <Function test_list_object_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=32>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_list_object_numpy>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=6>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_list_object_numpy>
            nextitem: <Function test_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_object_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_object_numpy
            location: ('hickle/tests/test_hickle.py', 266, 'test_list_object_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dict>
          nextitem: <Function test_odict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict
            location: ('hickle/tests/test_hickle.py', 279, 'test_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dict>
        pytest_runtest_makereport [hook]
            item: <Function test_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dict>
            nextitem: <Function test_odict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict
            location: ('hickle/tests/test_hickle.py', 279, 'test_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_odict>
          nextitem: <Function test_empty_dict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_odict
            location: ('hickle/tests/test_hickle.py', 312, 'test_odict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_odict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_odict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_odict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_odict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_odict>
          early skip of rewriting module: hickle.loaders.load_collections [assertion]
        pytest_runtest_makereport [hook]
            item: <Function test_odict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_odict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_odict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_odict>
            nextitem: <Function test_empty_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_odict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_odict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_odict
            location: ('hickle/tests/test_hickle.py', 312, 'test_odict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_empty_dict>
          nextitem: <Function test_compression>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_empty_dict
            location: ('hickle/tests/test_hickle.py', 328, 'test_empty_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_empty_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_empty_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_empty_dict>
        pytest_runtest_makereport [hook]
            item: <Function test_empty_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 0)',) tblen=29>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_empty_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 0)',) tblen=3>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_empty_dict>
            nextitem: <Function test_compression>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_empty_dict
            location: ('hickle/tests/test_hickle.py', 328, 'test_empty_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_compression>
          nextitem: <Function test_dict_int_key>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_compression
            location: ('hickle/tests/test_hickle.py', 338, 'test_compression')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_compression>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compression>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_compression' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_compression>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_compression>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compression>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_compression' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_compression>
            nextitem: <Function test_dict_int_key>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compression>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_compression' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_compression' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_compression
            location: ('hickle/tests/test_hickle.py', 338, 'test_compression')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dict_int_key>
          nextitem: <Function test_dict_nested>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict_int_key
            location: ('hickle/tests/test_hickle.py', 361, 'test_dict_int_key')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dict_int_key>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict_int_key>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dict_int_key>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dict_int_key>
        pytest_runtest_makereport [hook]
            item: <Function test_dict_int_key>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_dict_int_key>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dict_int_key>
            nextitem: <Function test_dict_nested>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict_int_key>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict_int_key
            location: ('hickle/tests/test_hickle.py', 361, 'test_dict_int_key')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dict_nested>
          nextitem: <Function test_masked_dict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict_nested
            location: ('hickle/tests/test_hickle.py', 374, 'test_dict_nested')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dict_nested>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict_nested>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dict_nested>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dict_nested>
        pytest_runtest_makereport [hook]
            item: <Function test_dict_nested>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_dict_nested>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dict_nested>
            nextitem: <Function test_masked_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dict_nested>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_dict_nested
            location: ('hickle/tests/test_hickle.py', 374, 'test_dict_nested')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_masked_dict>
          nextitem: <Function test_np_float>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_masked_dict
            location: ('hickle/tests/test_hickle.py', 388, 'test_masked_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_masked_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_masked_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_masked_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_masked_dict>
        pytest_runtest_makereport [hook]
            item: <Function test_masked_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_masked_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_masked_dict>
            nextitem: <Function test_np_float>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_masked_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_masked_dict
            location: ('hickle/tests/test_hickle.py', 388, 'test_masked_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_np_float>
          nextitem: <Function test_comp_kwargs>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_np_float
            location: ('hickle/tests/test_hickle.py', 422, 'test_np_float')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_np_float>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_np_float>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_np_float>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_np_float>
        pytest_runtest_makereport [hook]
            item: <Function test_np_float>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_np_float>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_np_float>
            nextitem: <Function test_comp_kwargs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_np_float>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_np_float
            location: ('hickle/tests/test_hickle.py', 422, 'test_np_float')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_comp_kwargs>
          nextitem: <Function test_list_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_comp_kwargs
            location: ('hickle/tests/test_hickle.py', 450, 'test_comp_kwargs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_comp_kwargs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_comp_kwargs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_comp_kwargs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_comp_kwargs>
        pytest_runtest_makereport [hook]
            item: <Function test_comp_kwargs>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_comp_kwargs>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_comp_kwargs>
            nextitem: <Function test_list_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_comp_kwargs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_comp_kwargs
            location: ('hickle/tests/test_hickle.py', 450, 'test_comp_kwargs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_list_numpy>
          nextitem: <Function test_tuple_numpy>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_numpy
            location: ('hickle/tests/test_hickle.py', 479, 'test_list_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_list_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_list_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_list_numpy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_numpy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_list_numpy>
            nextitem: <Function test_tuple_numpy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_numpy
            location: ('hickle/tests/test_hickle.py', 479, 'test_list_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tuple_numpy>
          nextitem: <Function test_numpy_dtype>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_tuple_numpy
            location: ('hickle/tests/test_hickle.py', 497, 'test_tuple_numpy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tuple_numpy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tuple_numpy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tuple_numpy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tuple_numpy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tuple_numpy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tuple_numpy>
            nextitem: <Function test_numpy_dtype>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tuple_numpy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_tuple_numpy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_tuple_numpy
            location: ('hickle/tests/test_hickle.py', 497, 'test_tuple_numpy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_numpy_dtype>
          nextitem: <Function test_none>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_numpy_dtype
            location: ('hickle/tests/test_hickle.py', 515, 'test_numpy_dtype')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_numpy_dtype>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy_dtype>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_numpy_dtype>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_numpy_dtype>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy_dtype>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_numpy_dtype>
            nextitem: <Function test_none>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numpy_dtype>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_numpy_dtype' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_numpy_dtype
            location: ('hickle/tests/test_hickle.py', 515, 'test_numpy_dtype')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_none>
          nextitem: <Function test_file_open_close>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_none
            location: ('hickle/tests/test_hickle.py', 524, 'test_none')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_none>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_none>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_none' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_none>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_none>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_none>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_none' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_none>
            nextitem: <Function test_file_open_close>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_none>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_none' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_none' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_none
            location: ('hickle/tests/test_hickle.py', 524, 'test_none')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_file_open_close>
          nextitem: <Function test_hdf5_group>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_file_open_close
            location: ('hickle/tests/test_hickle.py', 539, 'test_file_open_close')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_file_open_close>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_open_close>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_file_open_close>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_file_open_close>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_open_close>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_file_open_close>
            nextitem: <Function test_hdf5_group>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_file_open_close>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_file_open_close' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_file_open_close
            location: ('hickle/tests/test_hickle.py', 539, 'test_file_open_close')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_hdf5_group>
          nextitem: <Function test_list_order>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_hdf5_group
            location: ('hickle/tests/test_hickle.py', 556, 'test_hdf5_group')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_hdf5_group>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hdf5_group>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_hdf5_group>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_hdf5_group>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hdf5_group>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_hdf5_group>
            nextitem: <Function test_list_order>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_hdf5_group>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_hdf5_group' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_hdf5_group
            location: ('hickle/tests/test_hickle.py', 556, 'test_hdf5_group')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_list_order>
          nextitem: <Function test_embedded_array>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_order
            location: ('hickle/tests/test_hickle.py', 583, 'test_list_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_list_order>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_order>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_list_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_list_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_order>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_list_order>
            nextitem: <Function test_embedded_array>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_list_order>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_list_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_list_order
            location: ('hickle/tests/test_hickle.py', 583, 'test_list_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_embedded_array>
          nextitem: <Function test_dump_nested>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_embedded_array
            location: ('hickle/tests/test_hickle.py', 599, 'test_embedded_array')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_embedded_array>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embedded_array>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_embedded_array>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_embedded_array>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embedded_array>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_embedded_array>
            nextitem: <Function test_dump_nested>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_embedded_array>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_embedded_array' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_embedded_array
            location: ('hickle/tests/test_hickle.py', 599, 'test_embedded_array')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dump_nested>
          nextitem: <Function test_with_open_file>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_dump_nested
            location: ('hickle/tests/test_hickle.py', 635, 'test_dump_nested')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dump_nested>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dump_nested>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dump_nested>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dump_nested>
        pytest_runtest_makereport [hook]
            item: <Function test_dump_nested>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_dump_nested>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dump_nested>
            nextitem: <Function test_with_open_file>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dump_nested>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_dump_nested
            location: ('hickle/tests/test_hickle.py', 635, 'test_dump_nested')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_with_open_file>
          nextitem: <Function test_load>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_with_open_file
            location: ('hickle/tests/test_hickle.py', 642, 'test_with_open_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_with_open_file>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_with_open_file>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_with_open_file>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_with_open_file>
        pytest_runtest_makereport [hook]
            item: <Function test_with_open_file>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_with_open_file>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'int' object is not iterable",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_with_open_file>
            nextitem: <Function test_load>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_with_open_file>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_with_open_file
            location: ('hickle/tests/test_hickle.py', 642, 'test_with_open_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_load>
          nextitem: <Function test_ndarray>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_load
            location: ('hickle/tests/test_hickle.py', 666, 'test_load')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_load>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_load' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_load>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_load>
        pytest_runtest_makereport [hook]
            item: <Function test_load>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'set' object does not support indexing",) tblen=33>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_load' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_load>
            call: <CallInfo when='call' excinfo=<ExceptionInfo TypeError("'set' object does not support indexing",) tblen=7>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_load>
            nextitem: <Function test_ndarray>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_load>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_load' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_load
            location: ('hickle/tests/test_hickle.py', 666, 'test_load')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ndarray>
          nextitem: <Function test_ndarray_masked>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_ndarray
            location: ('hickle/tests/test_hickle.py', 683, 'test_ndarray')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ndarray>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ndarray>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ndarray>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ndarray>
            nextitem: <Function test_ndarray_masked>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_ndarray
            location: ('hickle/tests/test_hickle.py', 683, 'test_ndarray')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_ndarray_masked>
          nextitem: <Function test_simple_dict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_ndarray_masked
            location: ('hickle/tests/test_hickle.py', 697, 'test_ndarray_masked')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_ndarray_masked>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray_masked>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_ndarray_masked>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_ndarray_masked>
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray_masked>
            call: <CallInfo when='call' excinfo=<ExceptionInfo RecursionError('maximum recursion depth exceeded in comparison',) tblen=493>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_ndarray_masked>
            call: <CallInfo when='call' excinfo=<ExceptionInfo RecursionError('maximum recursion depth exceeded in comparison',) tblen=467>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_ndarray_masked>
            nextitem: <Function test_simple_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_ndarray_masked>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_ndarray_masked
            location: ('hickle/tests/test_hickle.py', 697, 'test_ndarray_masked')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_simple_dict>
          nextitem: <Function test_complex_dict>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_simple_dict
            location: ('hickle/tests/test_hickle.py', 711, 'test_simple_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_simple_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_simple_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_simple_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_simple_dict>
        pytest_runtest_makereport [hook]
            item: <Function test_simple_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_simple_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_simple_dict>
            nextitem: <Function test_complex_dict>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_simple_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_simple_dict
            location: ('hickle/tests/test_hickle.py', 711, 'test_simple_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_complex_dict>
          nextitem: <Function test_multi_hickle>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_complex_dict
            location: ('hickle/tests/test_hickle.py', 721, 'test_complex_dict')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_complex_dict>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complex_dict>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_complex_dict>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_complex_dict>
        pytest_runtest_makereport [hook]
            item: <Function test_complex_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_complex_dict>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_complex_dict>
            nextitem: <Function test_multi_hickle>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complex_dict>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_complex_dict
            location: ('hickle/tests/test_hickle.py', 721, 'test_complex_dict')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_multi_hickle>
          nextitem: <Function test_complex>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_multi_hickle
            location: ('hickle/tests/test_hickle.py', 735, 'test_multi_hickle')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_multi_hickle>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multi_hickle>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_multi_hickle>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_multi_hickle>
        pytest_runtest_makereport [hook]
            item: <Function test_multi_hickle>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_multi_hickle>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_multi_hickle>
            nextitem: <Function test_complex>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_multi_hickle>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_multi_hickle
            location: ('hickle/tests/test_hickle.py', 735, 'test_multi_hickle')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_complex>
          nextitem: <Function test_nonstring_keys>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_complex
            location: ('hickle/tests/test_hickle.py', 755, 'test_complex')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_complex>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complex>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_complex>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_complex>
        pytest_runtest_makereport [hook]
            item: <Function test_complex>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_complex>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_complex>
            nextitem: <Function test_nonstring_keys>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_complex>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_complex' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_complex
            location: ('hickle/tests/test_hickle.py', 755, 'test_complex')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_nonstring_keys>
          nextitem: <Function test_scalar_compression>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_nonstring_keys
            location: ('hickle/tests/test_hickle.py', 767, 'test_nonstring_keys')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_nonstring_keys>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nonstring_keys>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_nonstring_keys>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_nonstring_keys>
        pytest_runtest_makereport [hook]
            item: <Function test_nonstring_keys>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_nonstring_keys>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_nonstring_keys>
            nextitem: <Function test_scalar_compression>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_nonstring_keys>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_nonstring_keys
            location: ('hickle/tests/test_hickle.py', 767, 'test_nonstring_keys')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_scalar_compression>
          nextitem: <Function test_bytes>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_scalar_compression
            location: ('hickle/tests/test_hickle.py', 798, 'test_scalar_compression')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_scalar_compression>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_scalar_compression>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_scalar_compression>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_scalar_compression>
        pytest_runtest_makereport [hook]
            item: <Function test_scalar_compression>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_scalar_compression>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('not enough values to unpack (expected 2, got 1)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_scalar_compression>
            nextitem: <Function test_bytes>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_scalar_compression>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_scalar_compression
            location: ('hickle/tests/test_hickle.py', 798, 'test_scalar_compression')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_bytes>
          nextitem: <Function test_np_scalar>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_bytes
            location: ('hickle/tests/test_hickle.py', 814, 'test_bytes')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_bytes>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bytes>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_bytes>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_bytes>
        pytest_runtest_makereport [hook]
            item: <Function test_bytes>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'Group' object has no attribute 'crate_dataset'",) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_bytes>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AttributeError("'Group' object has no attribute 'crate_dataset'",) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_bytes>
            nextitem: <Function test_np_scalar>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_bytes>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_bytes
            location: ('hickle/tests/test_hickle.py', 814, 'test_bytes')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_np_scalar>
          nextitem: <Function test_slash_dict_keys>
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_np_scalar
            location: ('hickle/tests/test_hickle.py', 827, 'test_np_scalar')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_np_scalar>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_np_scalar>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_np_scalar>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_np_scalar>
        pytest_runtest_makereport [hook]
            item: <Function test_np_scalar>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_np_scalar>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_np_scalar>
            nextitem: <Function test_slash_dict_keys>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_np_scalar>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_np_scalar
            location: ('hickle/tests/test_hickle.py', 827, 'test_np_scalar')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_slash_dict_keys>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: hickle/tests/test_hickle.py::test_slash_dict_keys
            location: ('hickle/tests/test_hickle.py', 841, 'test_slash_dict_keys')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_slash_dict_keys>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_slash_dict_keys>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_slash_dict_keys>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_slash_dict_keys>
        pytest_runtest_makereport [hook]
            item: <Function test_slash_dict_keys>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=30>>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_slash_dict_keys>
            call: <CallInfo when='call' excinfo=<ExceptionInfo ValueError('too many values to unpack (expected 2)',) tblen=4>>
            report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_slash_dict_keys>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_slash_dict_keys>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f1c2963c630>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: hickle/tests/test_hickle.py::test_slash_dict_keys
            location: ('hickle/tests/test_hickle.py', 841, 'test_slash_dict_keys')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session hickle exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=31 testscollected=45>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f1c28a71a58>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x7f1c2963c630>
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: pygments.formatters [assertion]
      early skip of rewriting module: pygments.formatters._mapping [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.formatter [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.console [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: pygments.style [assertion]
      early skip of rewriting module: wcwidth [assertion]
      early skip of rewriting module: wcwidth.wcwidth [assertion]
      early skip of rewriting module: wcwidth.table_wide [assertion]
      early skip of rewriting module: wcwidth.table_zero [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_state_obj' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_local_func' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_65bit_int' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_set' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_object_numpy' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_string_numpy' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_list_object_numpy' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_odict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_empty_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_int_key' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dict_nested' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_masked_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_float' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_comp_kwargs' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_dump_nested' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_with_open_file' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_load' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_ndarray_masked' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_simple_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex_dict' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_multi_hickle' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_complex' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_nonstring_keys' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_scalar_compression' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_bytes' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_np_scalar' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'hickle/tests/test_hickle.py::test_slash_dict_keys' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f1c2963c630>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f1c2963c630>
    finish pytest_unconfigure --> [] [hook]
